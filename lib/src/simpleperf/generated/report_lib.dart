// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// @dart = 2.9
// ignore_for_file: non_constant_identifier_names
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ReportLib> CreateReportLib() {
    _CreateReportLib ??=
        _dylib.lookupFunction<_c_CreateReportLib, _dart_CreateReportLib>(
            'CreateReportLib');
    return _CreateReportLib();
  }

  _dart_CreateReportLib _CreateReportLib;

  void DestroyReportLib(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _DestroyReportLib ??=
        _dylib.lookupFunction<_c_DestroyReportLib, _dart_DestroyReportLib>(
            'DestroyReportLib');
    return _DestroyReportLib(
      report_lib,
    );
  }

  _dart_DestroyReportLib _DestroyReportLib;

  int SetLogSeverity(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> log_level,
  ) {
    _SetLogSeverity ??=
        _dylib.lookupFunction<_c_SetLogSeverity, _dart_SetLogSeverity>(
            'SetLogSeverity');
    return _SetLogSeverity(
      report_lib,
      log_level,
    );
  }

  _dart_SetLogSeverity _SetLogSeverity;

  int SetSymfs(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> symfs_dir,
  ) {
    _SetSymfs ??=
        _dylib.lookupFunction<_c_SetSymfs, _dart_SetSymfs>('SetSymfs');
    return _SetSymfs(
      report_lib,
      symfs_dir,
    );
  }

  _dart_SetSymfs _SetSymfs;

  int SetRecordFile(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> record_file,
  ) {
    _SetRecordFile ??= _dylib
        .lookupFunction<_c_SetRecordFile, _dart_SetRecordFile>('SetRecordFile');
    return _SetRecordFile(
      report_lib,
      record_file,
    );
  }

  _dart_SetRecordFile _SetRecordFile;

  int SetKallsymsFile(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> kallsyms_file,
  ) {
    _SetKallsymsFile ??=
        _dylib.lookupFunction<_c_SetKallsymsFile, _dart_SetKallsymsFile>(
            'SetKallsymsFile');
    return _SetKallsymsFile(
      report_lib,
      kallsyms_file,
    );
  }

  _dart_SetKallsymsFile _SetKallsymsFile;

  void ShowIpForUnknownSymbol(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _ShowIpForUnknownSymbol ??= _dylib.lookupFunction<_c_ShowIpForUnknownSymbol,
        _dart_ShowIpForUnknownSymbol>('ShowIpForUnknownSymbol');
    return _ShowIpForUnknownSymbol(
      report_lib,
    );
  }

  _dart_ShowIpForUnknownSymbol _ShowIpForUnknownSymbol;

  void ShowArtFrames(
    ffi.Pointer<ReportLib> report_lib,
    int show_1,
  ) {
    _ShowArtFrames ??= _dylib
        .lookupFunction<_c_ShowArtFrames, _dart_ShowArtFrames>('ShowArtFrames');
    return _ShowArtFrames(
      report_lib,
      show_1,
    );
  }

  _dart_ShowArtFrames _ShowArtFrames;

  void MergeJavaMethods(
    ffi.Pointer<ReportLib> report_lib,
    int merge,
  ) {
    _MergeJavaMethods ??=
        _dylib.lookupFunction<_c_MergeJavaMethods, _dart_MergeJavaMethods>(
            'MergeJavaMethods');
    return _MergeJavaMethods(
      report_lib,
      merge,
    );
  }

  _dart_MergeJavaMethods _MergeJavaMethods;

  ffi.Pointer<Sample> GetNextSample(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _GetNextSample ??= _dylib
        .lookupFunction<_c_GetNextSample, _dart_GetNextSample>('GetNextSample');
    return _GetNextSample(
      report_lib,
    );
  }

  _dart_GetNextSample _GetNextSample;

  ffi.Pointer<Event> GetEventOfCurrentSample(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _GetEventOfCurrentSample ??= _dylib.lookupFunction<
        _c_GetEventOfCurrentSample,
        _dart_GetEventOfCurrentSample>('GetEventOfCurrentSample');
    return _GetEventOfCurrentSample(
      report_lib,
    );
  }

  _dart_GetEventOfCurrentSample _GetEventOfCurrentSample;

  ffi.Pointer<SymbolEntry> GetSymbolOfCurrentSample(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _GetSymbolOfCurrentSample ??= _dylib.lookupFunction<
        _c_GetSymbolOfCurrentSample,
        _dart_GetSymbolOfCurrentSample>('GetSymbolOfCurrentSample');
    return _GetSymbolOfCurrentSample(
      report_lib,
    );
  }

  _dart_GetSymbolOfCurrentSample _GetSymbolOfCurrentSample;

  ffi.Pointer<CallChain> GetCallChainOfCurrentSample(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _GetCallChainOfCurrentSample ??= _dylib.lookupFunction<
        _c_GetCallChainOfCurrentSample,
        _dart_GetCallChainOfCurrentSample>('GetCallChainOfCurrentSample');
    return _GetCallChainOfCurrentSample(
      report_lib,
    );
  }

  _dart_GetCallChainOfCurrentSample _GetCallChainOfCurrentSample;

  ffi.Pointer<ffi.Int8> GetTracingDataOfCurrentSample(
    ffi.Pointer<ReportLib> report_lib,
  ) {
    _GetTracingDataOfCurrentSample ??= _dylib.lookupFunction<
        _c_GetTracingDataOfCurrentSample,
        _dart_GetTracingDataOfCurrentSample>('GetTracingDataOfCurrentSample');
    return _GetTracingDataOfCurrentSample(
      report_lib,
    );
  }

  _dart_GetTracingDataOfCurrentSample _GetTracingDataOfCurrentSample;

  ffi.Pointer<ffi.Int8> GetBuildIdForPath(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _GetBuildIdForPath ??=
        _dylib.lookupFunction<_c_GetBuildIdForPath, _dart_GetBuildIdForPath>(
            'GetBuildIdForPath');
    return _GetBuildIdForPath(
      report_lib,
      path,
    );
  }

  _dart_GetBuildIdForPath _GetBuildIdForPath;

  ffi.Pointer<FeatureSection> GetFeatureSection(
    ffi.Pointer<ReportLib> report_lib,
    ffi.Pointer<ffi.Int8> feature_name,
  ) {
    _GetFeatureSection ??=
        _dylib.lookupFunction<_c_GetFeatureSection, _dart_GetFeatureSection>(
            'GetFeatureSection');
    return _GetFeatureSection(
      report_lib,
      feature_name,
    );
  }

  _dart_GetFeatureSection _GetFeatureSection;
}

class ReportLib extends ffi.Struct {}

class Sample extends ffi.Struct {
  @ffi.Int32()
  int ip;

  @ffi.Int32()
  int pid;

  @ffi.Int32()
  int tid;

  ffi.Pointer<ffi.Int8> thread_comm;

  @ffi.Int32()
  int time;

  @ffi.Int32()
  int in_kernel;

  @ffi.Int32()
  int cpu;

  @ffi.Int32()
  int period;
}

class TracingFieldFormat extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int offset;

  @ffi.Int32()
  int elem_size;

  @ffi.Int32()
  int elem_count;

  @ffi.Int32()
  int is_signed;

  @ffi.Int32()
  int is_dynamic;
}

class TracingDataFormat extends ffi.Struct {
  @ffi.Int32()
  int size;

  @ffi.Int32()
  int field_count;

  ffi.Pointer<TracingFieldFormat> fields;
}

class Event extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;
  TracingDataFormat tracing_data_format;
}

class Mapping extends ffi.Struct {
  @ffi.Int32()
  int start;

  @ffi.Int32()
  int end;

  @ffi.Int32()
  int pgoff;
}

class SymbolEntry extends ffi.Struct {
  ffi.Pointer<ffi.Int8> dso_name;

  @ffi.Int32()
  int vaddr_in_file;

  ffi.Pointer<ffi.Int8> symbol_name;

  @ffi.Int32()
  int symbol_addr;

  @ffi.Int32()
  int symbol_len;

  ffi.Pointer<Mapping> mapping;
}

class CallChainEntry extends ffi.Struct {
  @ffi.Uint64()
  int ip;

  SymbolEntry symbol;
}

class CallChain extends ffi.Struct {
  @ffi.Int32()
  int nr;

  ffi.Pointer<CallChainEntry> entries;
}

class FeatureSection extends ffi.Struct {
  ffi.Pointer<ffi.Int8> data;

  @ffi.Int32()
  int data_size;
}

typedef _c_CreateReportLib = ffi.Pointer<ReportLib> Function();

typedef _dart_CreateReportLib = ffi.Pointer<ReportLib> Function();

typedef _c_DestroyReportLib = ffi.Void Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_DestroyReportLib = void Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_SetLogSeverity = ffi.Int32 Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> log_level,
);

typedef _dart_SetLogSeverity = int Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> log_level,
);

typedef _c_SetSymfs = ffi.Int32 Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> symfs_dir,
);

typedef _dart_SetSymfs = int Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> symfs_dir,
);

typedef _c_SetRecordFile = ffi.Int32 Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> record_file,
);

typedef _dart_SetRecordFile = int Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> record_file,
);

typedef _c_SetKallsymsFile = ffi.Int32 Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> kallsyms_file,
);

typedef _dart_SetKallsymsFile = int Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> kallsyms_file,
);

typedef _c_ShowIpForUnknownSymbol = ffi.Void Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_ShowIpForUnknownSymbol = void Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_ShowArtFrames = ffi.Void Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Int32 show_1,
);

typedef _dart_ShowArtFrames = void Function(
  ffi.Pointer<ReportLib> report_lib,
  int show_1,
);

typedef _c_MergeJavaMethods = ffi.Void Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Int32 merge,
);

typedef _dart_MergeJavaMethods = void Function(
  ffi.Pointer<ReportLib> report_lib,
  int merge,
);

typedef _c_GetNextSample = ffi.Pointer<Sample> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_GetNextSample = ffi.Pointer<Sample> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_GetEventOfCurrentSample = ffi.Pointer<Event> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_GetEventOfCurrentSample = ffi.Pointer<Event> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_GetSymbolOfCurrentSample = ffi.Pointer<SymbolEntry> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_GetSymbolOfCurrentSample = ffi.Pointer<SymbolEntry> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_GetCallChainOfCurrentSample = ffi.Pointer<CallChain> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_GetCallChainOfCurrentSample = ffi.Pointer<CallChain> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_GetTracingDataOfCurrentSample = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _dart_GetTracingDataOfCurrentSample = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ReportLib> report_lib,
);

typedef _c_GetBuildIdForPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_GetBuildIdForPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_GetFeatureSection = ffi.Pointer<FeatureSection> Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> feature_name,
);

typedef _dart_GetFeatureSection = ffi.Pointer<FeatureSection> Function(
  ffi.Pointer<ReportLib> report_lib,
  ffi.Pointer<ffi.Int8> feature_name,
);
